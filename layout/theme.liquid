<!doctype html>
<html class="no-js" lang="{{ request.locale.iso_code }}">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>{{ page_title }}</title>
    <meta name="google-site-verification" content="4CyyxbiT2JJKwsI1xsr_c7Qf-ihbvBm4WMiPhI0rOeA">
    <meta name="google-site-verification" content="1L3RQDlBxPuNpF21De0Ah8NwPfQRUDie4JA9sbgKwfo">
    <meta name="theme-color" content="">
    {%- if page_description -%}
      <meta name="description" content="{{ page_description | escape }}">
    {%- endif -%}
    {%- render 'meta-tags' -%}
    <link rel="preconnect" href="https://cdn.shopify.com" crossorigin>
    <link rel="icon" type="image/png" href="{{ settings.favicon | image_url: width: 32, height: 32 }}">
    {{ 'base.css' | asset_url | stylesheet_tag: preload: true }}
    {{ 'tailwind.css' | asset_url |  stylesheet_tag: preload: }}
    <script>
      (function () {
          const pattern = [
            ['src', 'shopify-perf-kit', 300],
            ['src', 'https://www.google-analytics.com/analytics.js', 300],
            ['id', 'web-pixels-manager-setup', 1000],
            ['className', 'analytics', 300]
          ]
          // 存储 head 中的 script 标签信息
          const scriptQueue = [];

          // 监听 DOM 的添加
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              mutation.addedNodes.forEach((node) => {
                if (node.tagName === 'SCRIPT' && node.parentElement.tagName === 'HEAD') {
                for (const [attr, value, delay] of pattern) {
                  if (node[attr] && node[attr].includes(value)) {
                    scriptQueue.push({
                      src: node.src,
                      content: node.src ? null : node.innerText,
                      type: node.type || 'text/javascript',
                      isInline: !!!node.src,
                      delay,
                      attrs: Array.from(node.attributes).map(attr => [attr.name, attr.value])
                    });

                    node.remove();
                    break;
                  }
                }
                }
              });
            });
          });

          // 开始观察 head 的变动
          observer.observe(document.head, { childList: true });

          // 等待页面加载完成后执行收集的 script
          window.addEventListener('load', () => {
            document.querySelectorAll('script[type="text/lazyload"]').forEach(elem => {
              const delay = elem.getAttribute('data-delay')

              if (!Number.isNaN(delay)) {
                setTimeout(() => {
                  elem.type = "text/javascript";
                  elem.src = elem.src;
                  elem.async = false; 
                }, Number(delay))
              }
            })

            scriptQueue.forEach((script) => {
              const newScript = document.createElement('script');

              if (script.isInline) {
                newScript.textContent = script.content;
              } else {
                newScript.src = script.src;
              }

              newScript.type = script.type;

              for (const [attr, value] of script.attrs) {
                newScript.setAttribute(attr, value)
              }

              setTimeout(() => {
                document.head.appendChild(newScript); // 执行脚本
              }, script.delay)
            });

            // 停止观察
            observer.disconnect();
          });
        })();
    </script>
    <script src="{{ 'global-sync.min.js' | asset_url }}" fetchpriority="high" type="module"></script>
    {% comment %} {{ content_for_header }} {% endcomment %}
    {{ content_for_header 
    | replace: 'preloads.js?locale=en-US"', 'preloads.js?locale=en-US" type="text/lazyload" data-delay="2000"' 
    | replace: "'load', asyncLoad, false);", "'load', () => setTimeout(asyncLoad, 1000), false);"
    | replace: 'data-source-attribution="shopify.loadfeatures" defer="defer"', 'data-source-attribution="shopify.loadfeatures" data-delay="300" type="text/lazyload"'
    }}
    {% render 'global-config' %}
    {% render 'pagefly-app-header' %}
  </head>
  <body class="gradient">
    {% section 'announcement-bar' %}
    {% section 'header' %}
    <main id="MainContent" class="content-for-layout focus-none" role="main" tabindex="-1">
      {{ content_for_layout }}
    </main>
    {% section 'care' %}
    {% section 'footer' %}
    {%- render 'cart-drawer' -%}
    <script type="module">
      window.shopUrl = '{{ request.origin }}';
      window.routes = {
        cart_add_url: '{{ routes.cart_add_url }}',
        cart_change_url: '{{ routes.cart_change_url }}',
        cart_update_url: '{{ routes.cart_update_url }}',
        cart_url: '{{ routes.cart_url }}',
        predictive_search_url: '{{ routes.predictive_search_url }}',
      };

      window.cartStrings = {
        error: `{{ 'sections.cart.cart_error' | t }}`,
        quantityError: `{{ 'sections.cart.cart_quantity_error_html' | t: quantity: '[quantity]' }}`,
      };

      window.variantStrings = {
        addToCart: `{{ 'products.product.add_to_cart' | t }}`,
        soldOut: `{{ 'products.product.sold_out' | t }}`,
        unavailable: `{{ 'products.product.unavailable' | t }}`,
      };

      window.accessibilityStrings = {
        imageAvailable: `{{ 'products.product.media.image_available' | t: index: '[index]' }}`,
        shareSuccess: `{{ 'general.share.success_message' | t }}`,
        pauseSlideshow: `{{ 'sections.slideshow.pause_slideshow' | t }}`,
        playSlideshow: `{{ 'sections.slideshow.play_slideshow' | t }}`,
      };
    </script>
  </body>
  {% render 'lozad' %}
  {% render 'dataLayer-allPages' %}
  {% render 'dialog' %}
  <script src="{{ 'global.js' | asset_url }}" fetchpriority="low" type="text/lazyload" data-delay="100"></script>
  {% if product or request.path == '/pages/test-ride' or request.path == '/pages/urtopia-e-bike-review' %}
    {% render 'judgeme_core' %}
  {% endif %}
</html>
